/**
 *
 *  Messages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/Messages.hpp"
#include "Models/Users.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::serega;

const std::string Messages::Cols::_id = "\"id\"";
const std::string Messages::Cols::_sender_id = "\"sender_id\"";
const std::string Messages::Cols::_receiver_id = "\"receiver_id\"";
const std::string Messages::Cols::_content = "\"content\"";
const std::string Messages::Cols::_created_at = "\"created_at\"";
const std::string Messages::Cols::_delivered = "\"delivered\"";
const std::string Messages::primaryKeyName = "id";
const bool Messages::hasPrimaryKey = true;
const std::string Messages::tableName = "\"messages\"";

const std::vector<typename Messages::MetaData> Messages::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"sender_id","int32_t","integer",4,0,0,0},
{"receiver_id","int32_t","integer",4,0,0,0},
{"content","std::vector<char>","bytea",0,0,0,1},
{"created_at","::trantor::Date","timestamp with time zone",0,0,0,0},
{"delivered","bool","boolean",1,0,0,0}
};
const std::string &Messages::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Messages::Messages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["sender_id"].isNull())
        {
            senderId_=std::make_shared<int32_t>(r["sender_id"].as<int32_t>());
        }
        if(!r["receiver_id"].isNull())
        {
            receiverId_=std::make_shared<int32_t>(r["receiver_id"].as<int32_t>());
        }
        if(!r["content"].isNull())
        {
            auto str = r["content"].as<std::string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                content_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["delivered"].isNull())
        {
            delivered_=std::make_shared<bool>(r["delivered"].as<bool>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            senderId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            receiverId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            auto str = r[index].as<std::string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                content_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            delivered_=std::make_shared<bool>(r[index].as<bool>());
        }
    }

}

Messages::Messages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            receiverId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto str = pJson[pMasqueradingVector[3]].asString();
            content_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            delivered_=std::make_shared<bool>(pJson[pMasqueradingVector[5]].asBool());
        }
    }
}

Messages::Messages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("sender_id"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["sender_id"].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson["sender_id"].asInt64());
        }
    }
    if(pJson.isMember("receiver_id"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["receiver_id"].isNull())
        {
            receiverId_=std::make_shared<int32_t>((int32_t)pJson["receiver_id"].asInt64());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["content"].isNull())
        {
            auto str = pJson["content"].asString();
            content_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("delivered"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["delivered"].isNull())
        {
            delivered_=std::make_shared<bool>(pJson["delivered"].asBool());
        }
    }
}

void Messages::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[1]].asInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            receiverId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            auto str = pJson[pMasqueradingVector[3]].asString();
            content_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            delivered_=std::make_shared<bool>(pJson[pMasqueradingVector[5]].asBool());
        }
    }
}

void Messages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("sender_id"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["sender_id"].isNull())
        {
            senderId_=std::make_shared<int32_t>((int32_t)pJson["sender_id"].asInt64());
        }
    }
    if(pJson.isMember("receiver_id"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["receiver_id"].isNull())
        {
            receiverId_=std::make_shared<int32_t>((int32_t)pJson["receiver_id"].asInt64());
        }
    }
    if(pJson.isMember("content"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["content"].isNull())
        {
            auto str = pJson["content"].asString();
            content_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("delivered"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["delivered"].isNull())
        {
            delivered_=std::make_shared<bool>(pJson["delivered"].asBool());
        }
    }
}

const int64_t &Messages::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Messages::getId() const noexcept
{
    return id_;
}
void Messages::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Messages::PrimaryKeyType & Messages::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const int32_t &Messages::getValueOfSenderId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(senderId_)
        return *senderId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getSenderId() const noexcept
{
    return senderId_;
}
void Messages::setSenderId(const int32_t &pSenderId) noexcept
{
    senderId_ = std::make_shared<int32_t>(pSenderId);
    dirtyFlag_[1] = true;
}
void Messages::setSenderIdToNull() noexcept
{
    senderId_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &Messages::getValueOfReceiverId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(receiverId_)
        return *receiverId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Messages::getReceiverId() const noexcept
{
    return receiverId_;
}
void Messages::setReceiverId(const int32_t &pReceiverId) noexcept
{
    receiverId_ = std::make_shared<int32_t>(pReceiverId);
    dirtyFlag_[2] = true;
}
void Messages::setReceiverIdToNull() noexcept
{
    receiverId_.reset();
    dirtyFlag_[2] = true;
}

const std::vector<char> &Messages::getValueOfContent() const noexcept
{
    static const std::vector<char> defaultValue = std::vector<char>();
    if(content_)
        return *content_;
    return defaultValue;
}
std::string Messages::getValueOfContentAsString() const noexcept
{
    static const std::string defaultValue = std::string();
    if(content_)
        return std::string(content_->data(),content_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &Messages::getContent() const noexcept
{
    return content_;
}
void Messages::setContent(const std::vector<char> &pContent) noexcept
{
    content_ = std::make_shared<std::vector<char>>(pContent);
    dirtyFlag_[3] = true;
}
void Messages::setContent(const std::string &pContent) noexcept
{
    content_ = std::make_shared<std::vector<char>>(pContent.c_str(),pContent.c_str()+pContent.length());
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Messages::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Messages::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Messages::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[4] = true;
}
void Messages::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[4] = true;
}

const bool &Messages::getValueOfDelivered() const noexcept
{
    static const bool defaultValue = bool();
    if(delivered_)
        return *delivered_;
    return defaultValue;
}
const std::shared_ptr<bool> &Messages::getDelivered() const noexcept
{
    return delivered_;
}
void Messages::setDelivered(const bool &pDelivered) noexcept
{
    delivered_ = std::make_shared<bool>(pDelivered);
    dirtyFlag_[5] = true;
}
void Messages::setDeliveredToNull() noexcept
{
    delivered_.reset();
    dirtyFlag_[5] = true;
}

void Messages::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Messages::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "sender_id",
        "receiver_id",
        "content",
        "created_at",
        "delivered"
    };
    return inCols;
}

void Messages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getSenderId())
        {
            binder << getValueOfSenderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReceiverId())
        {
            binder << getValueOfReceiverId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDelivered())
        {
            binder << getValueOfDelivered();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Messages::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Messages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getSenderId())
        {
            binder << getValueOfSenderId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getReceiverId())
        {
            binder << getValueOfReceiverId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getContent())
        {
            binder << getValueOfContent();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDelivered())
        {
            binder << getValueOfDelivered();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Messages::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getSenderId())
    {
        ret["sender_id"]=getValueOfSenderId();
    }
    else
    {
        ret["sender_id"]=Json::Value();
    }
    if(getReceiverId())
    {
        ret["receiver_id"]=getValueOfReceiverId();
    }
    else
    {
        ret["receiver_id"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=drogon::utils::base64Encode((const unsigned char *)getContent()->data(),getContent()->size());
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getDelivered())
    {
        ret["delivered"]=getValueOfDelivered();
    }
    else
    {
        ret["delivered"]=Json::Value();
    }
    return ret;
}

Json::Value Messages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getSenderId())
            {
                ret[pMasqueradingVector[1]]=getValueOfSenderId();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getReceiverId())
            {
                ret[pMasqueradingVector[2]]=getValueOfReceiverId();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getContent())
            {
                ret[pMasqueradingVector[3]]=drogon::utils::base64Encode((const unsigned char *)getContent()->data(),getContent()->size());
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[4]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDelivered())
            {
                ret[pMasqueradingVector[5]]=getValueOfDelivered();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getSenderId())
    {
        ret["sender_id"]=getValueOfSenderId();
    }
    else
    {
        ret["sender_id"]=Json::Value();
    }
    if(getReceiverId())
    {
        ret["receiver_id"]=getValueOfReceiverId();
    }
    else
    {
        ret["receiver_id"]=Json::Value();
    }
    if(getContent())
    {
        ret["content"]=drogon::utils::base64Encode((const unsigned char *)getContent()->data(),getContent()->size());
    }
    else
    {
        ret["content"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getDelivered())
    {
        ret["delivered"]=getValueOfDelivered();
    }
    else
    {
        ret["delivered"]=Json::Value();
    }
    return ret;
}

bool Messages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("sender_id"))
    {
        if(!validJsonOfField(1, "sender_id", pJson["sender_id"], err, true))
            return false;
    }
    if(pJson.isMember("receiver_id"))
    {
        if(!validJsonOfField(2, "receiver_id", pJson["receiver_id"], err, true))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(3, "content", pJson["content"], err, true))
            return false;
    }
    else
    {
        err="The content column cannot be null";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("delivered"))
    {
        if(!validJsonOfField(5, "delivered", pJson["delivered"], err, true))
            return false;
    }
    return true;
}
bool Messages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Messages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("sender_id"))
    {
        if(!validJsonOfField(1, "sender_id", pJson["sender_id"], err, false))
            return false;
    }
    if(pJson.isMember("receiver_id"))
    {
        if(!validJsonOfField(2, "receiver_id", pJson["receiver_id"], err, false))
            return false;
    }
    if(pJson.isMember("content"))
    {
        if(!validJsonOfField(3, "content", pJson["content"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("delivered"))
    {
        if(!validJsonOfField(5, "delivered", pJson["delivered"], err, false))
            return false;
    }
    return true;
}
bool Messages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Messages::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Users Messages::getSender(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *senderId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void Messages::getSender(const DbClientPtr &clientPtr,
                         const std::function<void(Users)> &rcb,
                         const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *senderId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
Users Messages::getReceiver(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *receiverId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void Messages::getReceiver(const DbClientPtr &clientPtr,
                           const std::function<void(Users)> &rcb,
                           const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *receiverId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
