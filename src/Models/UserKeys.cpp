/**
 *
 *  UserKeys.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/UserKeys.hpp"
#include "Models/Users.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::serega;

const std::string UserKeys::Cols::_user_id = "\"user_id\"";
const std::string UserKeys::Cols::_identity_key = "\"identity_key\"";
const std::string UserKeys::Cols::_pre_key = "\"pre_key\"";
const std::string UserKeys::primaryKeyName = "user_id";
const bool UserKeys::hasPrimaryKey = true;
const std::string UserKeys::tableName = "\"user_keys\"";

const std::vector<typename UserKeys::MetaData> UserKeys::metaData_={
{"user_id","int32_t","integer",4,0,1,1},
{"identity_key","std::vector<char>","bytea",0,0,0,1},
{"pre_key","std::vector<char>","bytea",0,0,0,1}
};
const std::string &UserKeys::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
UserKeys::UserKeys(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>(r["user_id"].as<int32_t>());
        }
        if(!r["identity_key"].isNull())
        {
            auto str = r["identity_key"].as<std::string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                identityKey_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        if(!r["pre_key"].isNull())
        {
            auto str = r["pre_key"].as<std::string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                preKey_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            userId_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            auto str = r[index].as<std::string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                identityKey_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            auto str = r[index].as<std::string_view>();
            if(str.length()>=2&&
                str[0]=='\\'&&str[1]=='x')
            {
                preKey_=std::make_shared<std::vector<char>>(drogon::utils::hexToBinaryVector(str.data()+2,str.length()-2));
            }
        }
    }

}

UserKeys::UserKeys(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto str = pJson[pMasqueradingVector[1]].asString();
            identityKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto str = pJson[pMasqueradingVector[2]].asString();
            preKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

UserKeys::UserKeys(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("identity_key"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["identity_key"].isNull())
        {
            auto str = pJson["identity_key"].asString();
            identityKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("pre_key"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["pre_key"].isNull())
        {
            auto str = pJson["pre_key"].asString();
            preKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

void UserKeys::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            auto str = pJson[pMasqueradingVector[1]].asString();
            identityKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            auto str = pJson[pMasqueradingVector[2]].asString();
            preKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

void UserKeys::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("user_id"))
    {
        if(!pJson["user_id"].isNull())
        {
            userId_=std::make_shared<int32_t>((int32_t)pJson["user_id"].asInt64());
        }
    }
    if(pJson.isMember("identity_key"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["identity_key"].isNull())
        {
            auto str = pJson["identity_key"].asString();
            identityKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
    if(pJson.isMember("pre_key"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["pre_key"].isNull())
        {
            auto str = pJson["pre_key"].asString();
            preKey_=std::make_shared<std::vector<char>>(drogon::utils::base64DecodeToVector(str));
        }
    }
}

const int32_t &UserKeys::getValueOfUserId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(userId_)
        return *userId_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &UserKeys::getUserId() const noexcept
{
    return userId_;
}
void UserKeys::setUserId(const int32_t &pUserId) noexcept
{
    userId_ = std::make_shared<int32_t>(pUserId);
    dirtyFlag_[0] = true;
}
const typename UserKeys::PrimaryKeyType & UserKeys::getPrimaryKey() const
{
    assert(userId_);
    return *userId_;
}

const std::vector<char> &UserKeys::getValueOfIdentityKey() const noexcept
{
    static const std::vector<char> defaultValue = std::vector<char>();
    if(identityKey_)
        return *identityKey_;
    return defaultValue;
}
std::string UserKeys::getValueOfIdentityKeyAsString() const noexcept
{
    static const std::string defaultValue = std::string();
    if(identityKey_)
        return std::string(identityKey_->data(),identityKey_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &UserKeys::getIdentityKey() const noexcept
{
    return identityKey_;
}
void UserKeys::setIdentityKey(const std::vector<char> &pIdentityKey) noexcept
{
    identityKey_ = std::make_shared<std::vector<char>>(pIdentityKey);
    dirtyFlag_[1] = true;
}
void UserKeys::setIdentityKey(const std::string &pIdentityKey) noexcept
{
    identityKey_ = std::make_shared<std::vector<char>>(pIdentityKey.c_str(),pIdentityKey.c_str()+pIdentityKey.length());
    dirtyFlag_[1] = true;
}

const std::vector<char> &UserKeys::getValueOfPreKey() const noexcept
{
    static const std::vector<char> defaultValue = std::vector<char>();
    if(preKey_)
        return *preKey_;
    return defaultValue;
}
std::string UserKeys::getValueOfPreKeyAsString() const noexcept
{
    static const std::string defaultValue = std::string();
    if(preKey_)
        return std::string(preKey_->data(),preKey_->size());
    return defaultValue;
}
const std::shared_ptr<std::vector<char>> &UserKeys::getPreKey() const noexcept
{
    return preKey_;
}
void UserKeys::setPreKey(const std::vector<char> &pPreKey) noexcept
{
    preKey_ = std::make_shared<std::vector<char>>(pPreKey);
    dirtyFlag_[2] = true;
}
void UserKeys::setPreKey(const std::string &pPreKey) noexcept
{
    preKey_ = std::make_shared<std::vector<char>>(pPreKey.c_str(),pPreKey.c_str()+pPreKey.length());
    dirtyFlag_[2] = true;
}

void UserKeys::updateId(const uint64_t id)
{
}

const std::vector<std::string> &UserKeys::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "user_id",
        "identity_key",
        "pre_key"
    };
    return inCols;
}

void UserKeys::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIdentityKey())
        {
            binder << getValueOfIdentityKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPreKey())
        {
            binder << getValueOfPreKey();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> UserKeys::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void UserKeys::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getUserId())
        {
            binder << getValueOfUserId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getIdentityKey())
        {
            binder << getValueOfIdentityKey();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPreKey())
        {
            binder << getValueOfPreKey();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value UserKeys::toJson() const
{
    Json::Value ret;
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getIdentityKey())
    {
        ret["identity_key"]=drogon::utils::base64Encode((const unsigned char *)getIdentityKey()->data(),getIdentityKey()->size());
    }
    else
    {
        ret["identity_key"]=Json::Value();
    }
    if(getPreKey())
    {
        ret["pre_key"]=drogon::utils::base64Encode((const unsigned char *)getPreKey()->data(),getPreKey()->size());
    }
    else
    {
        ret["pre_key"]=Json::Value();
    }
    return ret;
}

Json::Value UserKeys::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getUserId())
            {
                ret[pMasqueradingVector[0]]=getValueOfUserId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getIdentityKey())
            {
                ret[pMasqueradingVector[1]]=drogon::utils::base64Encode((const unsigned char *)getIdentityKey()->data(),getIdentityKey()->size());
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPreKey())
            {
                ret[pMasqueradingVector[2]]=drogon::utils::base64Encode((const unsigned char *)getPreKey()->data(),getPreKey()->size());
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getUserId())
    {
        ret["user_id"]=getValueOfUserId();
    }
    else
    {
        ret["user_id"]=Json::Value();
    }
    if(getIdentityKey())
    {
        ret["identity_key"]=drogon::utils::base64Encode((const unsigned char *)getIdentityKey()->data(),getIdentityKey()->size());
    }
    else
    {
        ret["identity_key"]=Json::Value();
    }
    if(getPreKey())
    {
        ret["pre_key"]=drogon::utils::base64Encode((const unsigned char *)getPreKey()->data(),getPreKey()->size());
    }
    else
    {
        ret["pre_key"]=Json::Value();
    }
    return ret;
}

bool UserKeys::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, true))
            return false;
    }
    else
    {
        err="The user_id column cannot be null";
        return false;
    }
    if(pJson.isMember("identity_key"))
    {
        if(!validJsonOfField(1, "identity_key", pJson["identity_key"], err, true))
            return false;
    }
    else
    {
        err="The identity_key column cannot be null";
        return false;
    }
    if(pJson.isMember("pre_key"))
    {
        if(!validJsonOfField(2, "pre_key", pJson["pre_key"], err, true))
            return false;
    }
    else
    {
        err="The pre_key column cannot be null";
        return false;
    }
    return true;
}
bool UserKeys::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserKeys::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("user_id"))
    {
        if(!validJsonOfField(0, "user_id", pJson["user_id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("identity_key"))
    {
        if(!validJsonOfField(1, "identity_key", pJson["identity_key"], err, false))
            return false;
    }
    if(pJson.isMember("pre_key"))
    {
        if(!validJsonOfField(2, "pre_key", pJson["pre_key"], err, false))
            return false;
    }
    return true;
}
bool UserKeys::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool UserKeys::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Users UserKeys::getUser(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *userId_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void UserKeys::getUser(const DbClientPtr &clientPtr,
                       const std::function<void(Users)> &rcb,
                       const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *userId_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
